import React, { useState, useEffect, useRef } from 'react';
import { getCurrentUser } from 'aws-amplify/auth';
import { generateClient } from 'aws-amplify/api';
import { idText } from 'typescript';  

const client = generateClient();

//when u msg someone
const createMessageMutation =  `
  mutation CreateMessage($input: CreateMessageInput!) {
    createMessage(input: $input) {
      id
      owner
      receiver
      content
      timestamp
      createdAt
    }
  }
`;

//get msgs
const listMessages =  `
  query ListMessages(
    $filter: ModelMessageFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        owner
        receiver
        content
        timestamp
        createdAt
      }
    }
  }
`;

//listen to database when new msgs come
const onCreateMessageSub =  `
  subscription OnCreateMessage {
    onCreateMessage {
      id
      owner
      receiver
      content
      timestamp
      createdAt
    }
  }
`;

//get the logged in user, who we're chatting with, all chat msgs, text input field for new msg, input field for selecting recipient, list of recent chats, and then scorll to the bottom on new msgs
function Chat() {
  const [currentUser, setCurrentUser] = useState('');
  const [recipientUsername, setRecipientUsername] = useState('');
  const [recipientInput, setRecipientInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [messageInput, setMessageInput] = useState('');
  const [recentChats, setRecentChats] = useState([]);
  const messagesEndRef = useRef(null);

  //get current authenticated user
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user.username || user.signInDetails?.loginId);
      } catch (err) {
        console.log('No authenticated user:', err);
      }
    };

    fetchCurrentUser();
  }, []);

  // now i wanna get msgs when recipient changes (so say if u switched cahts)
  useEffect(() => {
    if (!currentUser || !recipientUsername) return;

    const fetchMessages = async () => {
      try {
        console.log('Fetching messages between:', currentUser, 'and', recipientUsername);
        
        // get messages where current user is sender and recipient is receiver
        const sentMessages = await client.graphql({
          query: listMessages,
          variables: {
            filter: {
              and: [
                { owner: { eq: currentUser } },
                { receiver: { eq: recipientUsername } }
              ]
            },
            limit: 100,
          }
        });
        
       //get messages recipient sent to current user
        const receivedMessages = await client.graphql({
          query: listMessages,
          variables: {
            filter: {
              and: [
                { owner: { eq: recipientUsername } },
                { receiver: { eq: currentUser } }
              ]
            },
            limit: 100,
          }
        });

        //combine and sort by timestamp (most recent on bottom)
        const allMessages = [ ...sentMessages.data.listMessages.items, ...receivedMessages.data.listMessages.items ];

        console.log(' messages:', allMessages.length);
        
        setMessages(
          allMessages.sort((a, b) =>
            new Date(a.timestamp) - new Date(b.timestamp)
          )
        );
      } catch (error) {
        console.error(error);
      }
    };

    fetchMessages();

     //ok now this is to setup the subscription and update if they're relevant
    const subscription = client.graphql({
      query: onCreateMessageSub,
    }).subscribe({
      next: ({ data }) => {
        const newMsg = data.onCreateMessage;
        console.log('Received new message via subscription:', newMsg);
        
        if (
          (newMsg.owner === currentUser && newMsg.receiver === recipientUsername) ||
          (newMsg.owner === recipientUsername && newMsg.receiver === currentUser)
        ) {
          console.log('Adding message to chat');
          setMessages(prev => [...prev, newMsg]);
        } else {
          console.log('Message not for this chat');
        }
      },
      error: (err) => console.error('Subscription error:', err)
    });

    return () => subscription.unsubscribe();
  }, [currentUser, recipientUsername]);

  // auto scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // add new recipient to recent chats
  useEffect(() => {
    if (recipientUsername && !recentChats.includes(recipientUsername)) {
      setRecentChats(prev => [recipientUsername, ...prev.slice(0, 4)]); 
    }
  }, [recipientUsername, recentChats]);

  //this starts a new chat with a new user from the input field
  const startChat = () => {
    if (!recipientInput.trim()) return;
    setRecipientUsername(recipientInput.trim());
    setRecipientInput('');
  };

  const sendMessage = async () => {
    if (!messageInput.trim() || !currentUser || !recipientUsername) {
      console.log('Missing required fields:', { 
        messageInput: messageInput.trim(), 
        currentUser, 
        recipientUsername 
      });
      return;
    }
    
    const msgInput = {
      owner: currentUser,
      receiver: recipientUsername,
      content: messageInput.trim(),
      timestamp: new Date().toISOString(),
    };
    
    console.log('Sending message:', msgInput);
    
    try {
      const result = await client.graphql({
        query: createMessageMutation,
        variables: {
          input: msgInput
        }
      });
      console.log('Message sent successfully:', result);
      setMessageInput('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  if (!currentUser) return <div>Loading user...</div>;

  return (
    <div style={{ maxWidth: 600, margin: '20px auto', padding: 20 }}>
      {/* select thy recipient (the selection screen*/}
      {!recipientUsername ? (
        <div style={{ 

          padding: 20, 
          borderRadius: 10, 
          textAlign: 'center' 
        }}>
          <h3>start new chat</h3>
          <div style={{ marginBottom: 20 }}>
            <input
              type="text"
              value={recipientInput}
              onChange={e => setRecipientInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && startChat()}
              placeholder="enter username to chat with..."
              style={{ 
              
              }}
            />
            <button
              onClick={startChat}
              style={{ 
                padding: 10, 
                fontSize: 16, 
              
              }}
            >
              start chat
            </button>
          </div>
          
          {/* Recent Chats */}
          {recentChats.length > 0 && (
            <div>
              <h4>Recent Chats</h4>
              <div style={{ display: 'flex', gap: 10, justifyContent: 'center', flexWrap: 'wrap' }}>
                {recentChats.map(chat => (
                  <button
                    key={chat}
                    onClick={() => setRecipientUsername(chat)}
                    style={{ 
                      padding: '8px 16px', 
                     
                    }}
                  >
                    {chat}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      ) : (
        /* Chat Interface */
        <div style={{ 
        borderRadius: '10px'
        }}>
          {/* Chat Header */}
          <div style={{ 
            padding: 15, 
           
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center' 
          }}>
            <h3 style={{ margin: 0 }}>Chat with {recipientUsername}</h3>
            <button
              onClick={() => setRecipientUsername('')}
              style={{ 
            
              }}
            >
              Back
            </button>
          </div>

          {/* Messages */}
          <div style={{ 
            flex: 1, 
            borderRadius: '10px',
            
            padding: 15, 
            marginBottom: 0 
          }}>
            {messages.length === 0 ? (
              <div style={{ textAlign: 'center', color: '#666', marginTop: 50 }}>
                no messages yet.
              </div>
            ) : (
              messages.map((msg) => (
                <div key={msg.id} style={{
                  textAlign: msg.owner === currentUser ? 'right' : 'left',
                  margin: '10px 0'
                }}>
                  <span
                    style={{
                      display: 'inline-block',
                      background: msg.owner === currentUser ? '#3466ea' : '#2b2f45',
                      borderRadius: '5px'
                    }}
                  >
                    {msg.content}
                  </span>
                  <div style={{ fontSize: 11, color: '#aaa', marginTop: 3 }}>
                    {msg.owner === currentUser ? 'You' : msg.owner}
                    &nbsp;Â·&nbsp;
                    {new Date(msg.timestamp).toLocaleTimeString()}
                  </div>
                </div>
              ))
            )}
            <div ref={messagesEndRef}></div>
          </div>

          {/* message input */}
          <div style={{ 
            display: 'flex', 
            gap: 8, 
            
          }}>
            <input
              value={messageInput}
              onChange={e => setMessageInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && sendMessage()}
              placeholder="type a message..."
              style={{ 
               
              }}
            />
            <button
              onClick={sendMessage}
              style={{ 
                borderRadius: '10px'
                
              }}
            >
              send
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default Chat;
