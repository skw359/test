use client';

import React, { useState, useEffect, useRef } from 'react';
import { getCurrentUser } from 'aws-amplify/auth';
import { generateClient } from 'aws-amplify/api';
import styles from '../styles/chat.module.css';

const client = generateClient();

function Chat() {
  const [currentUser, setCurrentUser] = useState('');
  const [recipientUsername, setRecipientUsername] = useState('');
  const [chatName, setChatName] = useState('')
  const [recipientInput, setRecipientInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [messageInput, setMessageInput] = useState('');
  const messagesEndRef = useRef(null);
  const [loading, setLoading] = useState(false);
  const [currChatId, setcurrChatId] = useState('');
  const [chats, setChats] = useState([]);
  
  // Meeting modal state
  const [showMeetingModal, setShowMeetingModal] = useState(false);
  const [meetingForm, setMeetingForm] = useState({
    title: '',
    location: '',
    dateTime: '',
    endDateTime: '',
    description: ''
  });

  // Meeting state
  const [chatMeetings, setChatMeetings] = useState({});

  // Error state
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        console.log('Current user:', user);
        setCurrentUser(user.username || user.signInDetails?.loginId || '');
      } catch (err) {
        console.log('Error fetching user:', err);
        setError('Failed to get user information');
      }
    };
    fetchCurrentUser();
  }, []);

  // FIXED: Load chats more efficiently
  useEffect(() => {
    if (!currentUser) return;

    const loadUserChats = async () => {
      setLoading(true);
      try {
        // Get all chats the user is part of
        const userChats = await client.models.ChatUser.list({
          filter: { 
            username: { eq: currentUser },
            isActive: { eq: true }
          }
        });

        console.log('User chats:', userChats);

        // Get chat details and metadata efficiently
        const enrichedChats = await Promise.all(
          userChats.data.map(async (chatUser) => {
            try {
              // Get chat details
              const chatRecord = await client.models.Chat.get({ id: chatUser.chatId });
              
              // Get chat metadata for last message info
              let chatMetadata = null;
              try {
                const metadataResult = await client.models.ChatMetadata.list({
                  filter: { chatId: { eq: chatUser.chatId } }
                });
                chatMetadata = metadataResult.data[0] || null;
              } catch (metaError) {
                console.warn('No metadata found for chat:', chatUser.chatId);
              }

              return {
                ...chatUser,
                chatName: chatRecord?.data?.name || 'Unnamed Chat',
                lastMessageAt: chatMetadata?.lastMessageAt || chatUser.joinedAt,
                lastMessagePreview: chatMetadata?.lastMessagePreview || '',
                unreadCount: chatMetadata?.unreadCount || 0,
              };
            } catch (error) {
              console.warn(`Failed to fetch chat for chatId: ${chatUser.chatId}`, error);
              return {
                ...chatUser,
                chatName: 'Unknown Chat',
                lastMessageAt: chatUser.joinedAt,
                lastMessagePreview: '',
                unreadCount: 0,
              };
            }
          })
        );

        // Sort by last activity
        enrichedChats.sort((a, b) => 
          new Date(b.lastMessageAt) - new Date(a.lastMessageAt)
        );

        console.log("Enriched chats:", enrichedChats);
        setChats(enrichedChats);
        setError('');
      } catch (error) {
        console.error('Error loading chats:', error);
        setError('Failed to load chats');
      } finally {
        setLoading(false);
      }
    };

    loadUserChats();

    // Subscribe to chat user changes
    const sub = client.models.ChatUser.observeQuery({
      filter: { username: { eq: currentUser } }
    }).subscribe({
      next: () => {
        loadUserChats(); // Reload when user's chats change
      },
      error: (error) => {
        console.warn('ChatUser subscription error:', error);
      }
    });

    return () => sub.unsubscribe();
  }, [currentUser]);

  // FIXED: Load messages more efficiently
  useEffect(() => {
    if (!currChatId) return;

    console.log('Loading messages for chatId:', currChatId);
    setLoading(true);

    // Load initial messages
    const loadMessages = async () => {
      try {
        const messagesResult = await client.models.ChatMessages.list({
          filter: { chatId: { eq: currChatId } },
          limit: 100 // Limit initial load
        });

        const sortedMessages = messagesResult.data.sort((a, b) =>
          new Date(a.timestamp) - new Date(b.timestamp)
        );

        setMessages(sortedMessages);
        setLoading(false);
        scrollToBottom();
      } catch (error) {
        console.error('Error loading messages:', error);
        setError('Failed to load messages');
        setLoading(false);
      }
    };

    loadMessages();

    // Subscribe to new messages
    const sub = client.models.ChatMessages.observeQuery({
      filter: { chatId: { eq: currChatId } }
    }).subscribe({
      next: ({ items }) => {
        console.log("Chat messages updated:", items);
        const sortedMessages = [...items].sort((a, b) =>
          new Date(a.timestamp) - new Date(b.timestamp)
        );
        setMessages(sortedMessages);
        scrollToBottom();
      },
      error: (error) => {
        console.error("Error in message subscription:", error);
        setError('Connection to messages lost');
      }
    });

    return () => sub.unsubscribe();
  }, [currChatId]);

  // Load meetings for current chat
  useEffect(() => {
    if (!currChatId) return;

    const loadChatMeetings = async () => {
      try {
        // Get all meetings for this chat
        const meetings = await client.models.Meeting.list({
          filter: { chatId: { eq: currChatId } }
        });

        // Get participation status for each meeting
        const meetingsWithStatus = await Promise.all(
          meetings.data.map(async (meeting) => {
            try {
              const participation = await client.models.MeetingParticipant.list({
                filter: { meetingId: { eq: meeting.id } }
              });
              
              return {
                ...meeting,
                participants: participation.data
              };
            } catch (error) {
              console.warn(`Failed to get participants for meeting ${meeting.id}:`, error);
              return { ...meeting, participants: [] };
            }
          })
        );

        setChatMeetings(prev => ({
          ...prev,
          [currChatId]: meetingsWithStatus
        }));
      } catch (error) {
        console.error('Error loading chat meetings:', error);
      }
    };

    loadChatMeetings();

    // Subscribe to meeting changes for this chat
    const meetingSub = client.models.Meeting.observeQuery({
      filter: { chatId: { eq: currChatId } }
    }).subscribe({
      next: () => {
        loadChatMeetings(); // Reload when meetings change
      },
      error: (error) => {
        console.error('Meeting subscription error:', error);
      }
    });

    return () => meetingSub.unsubscribe();
  }, [currChatId]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // FIXED: Improved chat creation with proper error handling
  const createChat = async () => {
    try {
      setLoading(true);
      setError('');

      // Validate inputs
      if (!currentUser || !recipientInput.trim()) {
        setError("Please enter a username to start a chat");
        setLoading(false);
        return;
      }

      // Process recipients
      const recipients = recipientInput
        .split(',')
        .map(name => name.trim())
        .filter(Boolean)
        .filter(name => name !== currentUser); // Remove self

      if (recipients.length === 0) {
        setError("Please enter valid usernames (not your own)");
        setLoading(false);
        return;
      }

      console.log('Creating chat with recipients:', recipients);

      // Create unique members array
      const uniqueMembers = Array.from(new Set([currentUser, ...recipients]));
      
      // Check if chat with these exact members already exists
      const existingUserChats = await client.models.ChatUser.list({
        filter: { username: { eq: currentUser } }
      });

      for (const userChat of existingUserChats.data) {
        try {
          const chatMembers = await client.models.ChatUser.list({
            filter: { chatId: { eq: userChat.chatId } }
          });
          
          const memberUsernames = chatMembers.data.map(m => m.username).sort();
          const newMemberUsernames = uniqueMembers.sort();
          
          if (JSON.stringify(memberUsernames) === JSON.stringify(newMemberUsernames)) {
            setError("A chat with these members already exists");
            setLoading(false);
            setcurrChatId(userChat.chatId);
            return;
          }
        } catch (checkError) {
          console.warn('Error checking existing chat:', checkError);
        }
      }

      // Create new chat
      const chatData = {
        name: chatName.trim() || `Chat with ${recipients.join(', ')}`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: currentUser,
        participantCount: uniqueMembers.length,
        lastActivity: new Date().toISOString(),
      };

      console.log('Creating chat with data:', chatData);
      const newChat = await client.models.Chat.create(chatData);
      console.log('Created chat:', newChat);

      if (!newChat.data?.id) {
        throw new Error('Failed to create chat - no ID returned');
      }

      // Create ChatUser records for all members
      const chatUserPromises = uniqueMembers.map(async (member, index) => {
        const chatUserData = {
          username: member,
          chatId: newChat.data.id,
          joinedAt: new Date().toISOString(),
          role: member === currentUser ? 'admin' : 'member',
          isActive: true,
          lastSeen: new Date().toISOString(),
        };
        
        console.log(`Creating ChatUser ${index + 1}:`, chatUserData);
        return client.models.ChatUser.create(chatUserData);
      });

      const chatUserResults = await Promise.all(chatUserPromises);
      console.log('Created ChatUser records:', chatUserResults);

      // Create initial chat metadata
      await client.models.ChatMetadata.create({
        chatId: newChat.data.id,
        lastMessageAt: new Date().toISOString(),
        lastMessageBy: currentUser,
        lastMessagePreview: '',
        unreadCount: 0,
        totalMessages: 0,
        participantUsernames: uniqueMembers,
      });

      // Send welcome message
      await createMessage(`Chat created by ${currentUser}`, null, 'system');

      // Clear inputs and set current chat
      setRecipientInput('');
      setChatName('');
      setcurrChatId(newChat.data.id);
      setRecipientUsername(chatData.name);

    } catch (error) {
      console.error("Error creating chat:", error);
      setError(`Failed to create chat: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };
    
  // FIXED: Improved message creation
  const createMessage = async (content, meetingId = null, messageType = 'text') => {
    try {
      if (!currentUser) {
        setError("User not authenticated");
        return;
      }
      if (!currChatId) {
        setError("No chat selected");
        return;
      }
      if (!content.trim()) {
        return;
      }

      console.log('Creating message:', { content, meetingId, chatId: currChatId, messageType });

      const messageData = {
        chatId: currChatId,
        sendername: currentUser,
        content: content.trim(),
        timestamp: new Date().toISOString(),
        messageType: messageType,
        isEdited: false,
      };

      // Only add meetingId if it exists
      if (meetingId) {
        messageData.meetingId = meetingId;
      }

      const newMessage = await client.models.ChatMessages.create(messageData);
      console.log('Created message:', newMessage);

      // Update chat metadata
      try {
        const metadataResult = await client.models.ChatMetadata.list({
          filter: { chatId: { eq: currChatId } }
        });

        const metadataUpdateData = {
          lastMessageAt: new Date().toISOString(),
          lastMessageBy: currentUser,
          lastMessagePreview: content.slice(0, 100),
          totalMessages: (metadataResult.data[0]?.totalMessages || 0) + 1,
        };

        if (metadataResult.data.length > 0) {
          await client.models.ChatMetadata.update({
            id: metadataResult.data[0].id,
            ...metadataUpdateData
          });
        }

        // Update chat's lastActivity
        await client.models.Chat.update({
          id: currChatId,
          lastActivity: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        });

      } catch (metaError) {
        console.warn('Failed to update metadata:', metaError);
      }

      setMessageInput('');
      setError('');
      
    } catch (error) {
      console.error("Error creating message:", error);
      setError(`Failed to send message: ${error.message}`);
    }
  };

  const handleSendMessage = () => {
    if (!messageInput.trim()) return;
    console.log('Sending message:', messageInput.trim());
    createMessage(messageInput.trim());
  };

  // FIXED: Improved meeting creation
  const handleCreateMeeting = async () => {
    if (!meetingForm.title || !meetingForm.dateTime) {
      setError('Please fill in at least the title and date/time');
      return;
    }

    try {
      setLoading(true);
      setError('');
      console.log('Creating meeting:', meetingForm);

      // Validate date
      const meetingDate = new Date(meetingForm.dateTime);
      if (meetingDate < new Date()) {
        setError('Meeting cannot be scheduled in the past');
        setLoading(false);
        return;
      }

      // Calculate end time if not provided
      const endDateTime = meetingForm.endDateTime || 
        new Date(meetingDate.getTime() + 60 * 60 * 1000).toISOString(); // Default 1 hour

      // Step 1: Create the meeting
      const meetingData = {
        title: meetingForm.title,
        description: meetingForm.description || '',
        location: meetingForm.location || '',
        dateTime: meetingForm.dateTime,
        endDateTime: endDateTime,
        createdBy: currentUser,
        chatId: currChatId,
        status: 'scheduled',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        reminderMinutes: 15,
      };

      const newMeeting = await client.models.Meeting.create(meetingData);
      console.log('Created meeting:', newMeeting);

      if (!newMeeting.data?.id) {
        throw new Error('Failed to create meeting');
      }

      // Step 2: Get all chat participants
      const chatParticipants = await client.models.ChatUser.list({
        filter: { 
          chatId: { eq: currChatId },
          isActive: { eq: true }
        }
      });

      console.log('Chat participants:', chatParticipants);

      // Step 3: Create meeting participants
      const participantPromises = chatParticipants.data.map(async (chatUser) => {
        const status = chatUser.username === currentUser ? 'accepted' : 'invited';
        
        return client.models.MeetingParticipant.create({
          meetingId: newMeeting.data.id,
          username: chatUser.username,
          status: status,
          invitedAt: new Date().toISOString(),
          respondedAt: status === 'accepted' ? new Date().toISOString() : null,
          invitedBy: currentUser,
        });
      });

      await Promise.all(participantPromises);

      // Step 4: Create a chat message to notify about the meeting
      const meetingAnnouncement = `📅 ${currentUser} created a meeting: "${meetingForm.title}" on ${new Date(meetingForm.dateTime).toLocaleDateString()} at ${new Date(meetingForm.dateTime).toLocaleTimeString()}`;
      
      await createMessage(meetingAnnouncement, newMeeting.data.id, 'meeting');

      // Reset form and close modal
      setMeetingForm({
        title: '',
        location: '',
        dateTime: '',
        endDateTime: '',
        description: ''
      });
      setShowMeetingModal(false);

    } catch (error) {
      console.error('Error creating meeting:', error);
      setError(`Failed to create meeting: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleMeetingResponse = async (meetingId, response) => {
    try {
      setError('');
      console.log('Responding to meeting:', { meetingId, response });

      // Update the meeting participant status
      const participation = await client.models.MeetingParticipant.list({
        filter: { 
          meetingId: { eq: meetingId },
          username: { eq: currentUser }
        }
      });

      if (participation.data.length > 0) {
        await client.models.MeetingParticipant.update({
          id: participation.data[0].id,
          status: response,
          respondedAt: new Date().toISOString(),
        });

        // Create a chat message about the response
        const meeting = chatMeetings[currChatId]?.find(m => m.id === meetingId);
        const responseMessage = `${response === 'accepted' ? '✅' : response === 'declined' ? '❌' : '❓'} ${currentUser} ${response} the meeting: "${meeting?.title}"`;
        
        await createMessage(responseMessage, meetingId, 'meeting');
      }
    } catch (error) {
      console.error('Error responding to meeting:', error);
      setError('Failed to respond to meeting');
    }
  };

  // Helper functions remain the same
  const getMeetingStatus = (meeting) => {
    if (!meeting.participants) return 'unknown';
    
    const userParticipation = meeting.participants.find(p => p.username === currentUser);
    return userParticipation?.status || 'not_invited';
  };

  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now - date;
    const mins = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    if (mins < 1) return 'now';
    if (mins < 60) return `${mins}m`;
    if (hours < 24) return `${hours}h`;
    if (days < 7) return `${days}d`;
    return date.toLocaleDateString();
  };

  const formatMeetingDateTime = (dateTimeString) => {
    const date = new Date(dateTimeString);
    return date.toLocaleString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      timeZoneName: 'short'
    });
  };

  const getInitials = (name) => {
    if (!name || typeof name !== 'string') return '??';
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const renderMessage = (msg) => {
    const isSent = msg.sendername === currentUser;
    
    // Check if this message is linked to a meeting
    if (msg.meetingId) {
      const meeting = chatMeetings[currChatId]?.find(m => m.id === msg.meetingId);
      
      if (meeting && (msg.content.includes('created a meeting:') || msg.messageType === 'meeting')) {
        // This is a meeting announcement
        return (
          <div key={msg.id} className={`${styles.messageWrapper} ${isSent ? styles.messageSent : styles.messageReceived}`}>
            <div className={`${styles.meetingCard} ${isSent ? styles.meetingCardSent : styles.meetingCardReceived}`}>
              <div className={styles.meetingHeader}>
                <span className={styles.meetingIcon}>📅</span>
                <span className={styles.meetingTitle}>{meeting.title}</span>
                <span className={`${styles.meetingStatus} ${styles[`status${getMeetingStatus(meeting).charAt(0).toUpperCase() + getMeetingStatus(meeting).slice(1)}`]}`}>
                  {getMeetingStatus(meeting)}
                </span>
              </div>
              <div className={styles.meetingDetails}>
                <div className={styles.meetingDateTime}>
                  🕒 {formatMeetingDateTime(meeting.dateTime)}
                </div>
                {meeting.location && (
                  <div className={styles.meetingLocation}>
                    📍 {meeting.location}
                  </div>
                )}
                {meeting.description && (
                  <div className={styles.meetingDescription}>
                    {meeting.description}
                  </div>
                )}
              </div>
              {!isSent && getMeetingStatus(meeting) === 'invited' && (
                <div className={styles.meetingActions}>
                  <button 
                    className={`${styles.meetingButton} ${styles.acceptButton}`}
                    onClick={() => handleMeetingResponse(meeting.id, 'accepted')}
                  >
                    Accept
                  </button>
                  <button 
                    className={`${styles.meetingButton} ${styles.tentativeButton}`}
                    onClick={() => handleMeetingResponse(meeting.id, 'tentative')}
                  >
                    Maybe
                  </button>
                  <button 
                    className={`${styles.meetingButton} ${styles.declineButton}`}
                    onClick={() => handleMeetingResponse(meeting.id, 'declined')}