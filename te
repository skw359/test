'use client';

import { useState, useEffect, useRef } from 'react';
import Head from 'next/head';

export default function Login() {
  const [isLoggingIn, setIsLoggingIn] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [fadeIn, setFadeIn] = useState(false);
  const [loadingBarWidth, setLoadingBarWidth] = useState('0%');
  
  const buttonRef = useRef(null);
  const loaderRef = useRef(null);
  const loginTextRef = useRef(null);

  useEffect(() => {

    setFadeIn(true);
  }, []);

  const showLoader = () => {
    if (loaderRef.current && loginTextRef.current && buttonRef.current) {
      loaderRef.current.style.visibility = 'visible';
      loaderRef.current.style.display = 'block';
      loginTextRef.current.style.visibility = 'hidden';
      buttonRef.current.disabled = true;
      buttonRef.current.classList.add('disabled');
      
      setLoadingBarWidth('77%');
      
      let opacity = 1;
      const interval = 10;
      const decrement = 0.05;
      const timer = setInterval(() => {
        opacity -= decrement;
        buttonRef.current.style.opacity = opacity;
        if (opacity <= 0.5) {
          clearInterval(timer);
          buttonRef.current.disabled = true;
        }
      }, interval);
    }
  };

  const resetLoginButton = () => {
    setIsLoggingIn(false);
    
    if (loaderRef.current && loginTextRef.current && buttonRef.current) {
      loaderRef.current.style.display = 'none';
      loginTextRef.current.style.visibility = 'visible';
      buttonRef.current.disabled = false;
      buttonRef.current.classList.remove('disabled');

      let opacity = 0.5;
      const increment = 0.05;
      const timer = setInterval(() => {
        opacity += increment;
        buttonRef.current.style.opacity = opacity;
        if (opacity >= 1) {
          clearInterval(timer);
          buttonRef.current.disabled = false;
        }
      }, 10);
    }

    setLoadingBarWidth('100%');
    
    setTimeout(() => {
      setLoadingBarWidth('0%');
    }, 1500);
  };

  const showError = (message) => {
    setErrorMessage(message);
    setLoadingBarWidth('0%');
  };

  const handleLogin = async (event) => {
    event.preventDefault();
    
    if (isLoggingIn) return;
    setIsLoggingIn(true);

    if (!errorMessage.includes("Login attempts exceeded. Please retry in 10 minutes.")) {
      setErrorMessage('');
    }

    showLoader();

    setTimeout(() => {
      if (username === 'admin' && password === 'password') {
        console.log('Login successful');
      } else {
        showError('Login failed with provided credentials.');
      }
      resetLoginButton();
    }, 2000);
  };

  return (
    <>
      <Head>
        <title>Login</title>
        <link rel="icon" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;600&display=swap" rel="stylesheet" />
      </Head>

      <div className="login-page">
        <style jsx>{`
          .login-page {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: black;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            min-height: 100vh;
          }

          .loading-bar {
            position: fixed;
            top: 0;
            left: 0;
            height: 3px;
            background-color: #ffff00;
            width: ${loadingBarWidth};
            z-index: 9999;
            transition: width 0.3s ease;
            overflow: hidden;
          }

          .container {
            opacity: ${fadeIn ? 1 : 0};
            visibility: ${fadeIn ? 'visible' : 'hidden'};
            transition: opacity 0.5s ease-out;
          }

          .login-container {
            position: relative;
            margin-top: 50px;
            width: 700px;
            background: linear-gradient(to right, #fba83f, #ef4837);
            padding: 3px;
            border-radius: 20px;
            box-shadow: 0 0 0px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 0;
            position: relative;
          }

          .login-container-inner {
            background-color: black;
            width: 100%;
            padding: 30px 30px 30px 300px;
            border-radius: 20px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
          }

          .login-container h2 {
            text-align: center;
            width: 100%;
            margin-bottom: 30px;
            font-family: 'Montserrat', sans-serif;
            font-weight: 600;
            margin-left: -20px;
            color: white;
          }

          .logo {
            position: absolute;
            top: 50%;
            left: 20px;
            transform: translateY(-50%);
            width: 200px;
            height: auto;
          }

          .login-container input[type="text"],
          .login-container input[type="password"] {
            width: calc(100% - 30px);
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #444;
            border-radius: 5px;
            box-sizing: border-box;
            font-family: 'Montserrat', sans-serif;
            font-weight: 300;
            background-color: black;
            color: white;
            transition: border 0.3s ease, box-shadow 0.3s ease;
          }

          .login-container input[type="text"]::placeholder,
          .login-container input[type="password"]::placeholder {
            color: #888;
          }

          .login-container input[type="text"]:focus,
          .login-container input[type="password"]:focus {
            outline: none;
            border: 1px solid #f7863c;
            box-shadow: 0 0 5px #f7863c;
          }

          .login-button {
            width: calc(100% - 30px);
            padding: 15px;
            border: none;
            border-radius: 5px;
            background-color: #f7863c;
            color: white;
            cursor: pointer;
            font-family: 'Montserrat', sans-serif;
            font-weight: bold;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            transition: background-color 0.3s ease;
          }

          .login-button:hover:not(.disabled) {
            background-color: #ef4837;
          }

          .login-button.disabled {
            background-color: #ef4837;
            cursor: default;
            pointer-events: none;
          }

          .error-message {
            max-width: 100%;
            display: ${errorMessage ? 'flex' : 'none'};
            align-items: center;
            justify-content: center;
            position: relative;
            background-color: #e02424;
            color: white;
            width: 100%;
            text-align: center;
            padding: 10px;
            padding-right: 20px;
            box-sizing: border-box;
            border-radius: 5px;
            margin-bottom: 10px;
            font-family: 'Montserrat', sans-serif;
          }

          .error-label {
            margin-right: 20px;
            background-color: #8a0100;
            color: white;
            padding: 5px 15px;
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            font-weight: bold;
            border-radius: 5px;
          }

          .error-text {
            flex-grow: 1;
            text-align: center;
            padding-left: 60px;
          }

          .register-element {
            margin-top: 10px;
            margin-bottom: -17px;
            font-size: 12px;
            text-align: center;
            font-family: 'Montserrat', sans-serif;
            font-weight: 300;
            color: #ccc;
            width: calc(100% - 30px); 
          }

          .loader {
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: #ffffff;
            border-radius: 50%;
            width: 14px;
            height: 14px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
            animation: spin 1.1s cubic-bezier(0.8, 0.45, 0.6, 0.7) infinite;
          }

          @keyframes spin {
            from {
              transform: translate(-50%, -50%) rotate(-85deg);
            }
            to {
              transform: translate(-50%, -50%) rotate(275deg);
            }
          }
        `}</style>

        <div className="loading-bar"></div>
        
        <div className="container">
          <div className="error-message">
            <div className="error-label">ERROR</div>
            <div className="error-text">{errorMessage}</div>
          </div>
          
          <div className="login-container">
            <div className="login-container-inner">
              <img src="/assets/logo.png" alt="Logo" className="logo" />
              <h2>Welcome to Velocity.</h2>
              
              <form onSubmit={handleLogin}>
                <input
                  type="text"
                  name="username"
                  placeholder="Username"
                  required
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  disabled={isLoggingIn}
                />
                <input
                  type="password"
                  name="password"
                  placeholder="Password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  disabled={isLoggingIn}
                />
                <button
                  type="submit"
                  ref={buttonRef}
                  className={`login-button ${isLoggingIn ? 'disabled' : ''}`}
                >
                  <span ref={loginTextRef}>Login</span>
                  <span ref={loaderRef} className="loader"></span>
                </button>
              </form>
              
              <p className="register-element">
                Don't have an account? Sign up.
              </p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
