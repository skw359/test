import { useState } from 'react';
import styles from '../styles/calendar.module.css';

export default function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDay, setSelectedDay] = useState(null);
  const [showPopup, setShowPopup] = useState(false);
  
  const today = new Date();
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  
  const events = {
    '2025-6-5': ['Team Meeting at 10:00 AM', 'Lunch with Sarah at 1:00 PM'],
    '2025-6-6': ['Doctor Appointment at 9:30 AM', 'Project Deadline'],
    '2025-6-10': ['Birthday Party at 7:00 PM'],
    '2025-6-15': ['Conference Call at 2:00 PM', 'Gym Session at 6:00 PM', 'Dinner with Family'],
    '2025-6-20': ['Presentation at 11:00 AM'],
    '2025-6-25': ['Holiday - Christmas Day'],
  };
  
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];
  
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  
  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  
  const calendarDays = [];
  

  for (let i = 0; i < firstDay; i++) {
    calendarDays.push(null);
  }
  

  for (let day = 1; day <= daysInMonth; day++) {
    calendarDays.push(day);
  }
  
  const goToPreviousMonth = () => {
    setCurrentDate(new Date(year, month - 1, 1));
  };
  
  const goToNextMonth = () => {
    setCurrentDate(new Date(year, month + 1, 1));
  };
  
  const isToday = (day) => {
    return day === today.getDate() && 
           month === today.getMonth() && 
           year === today.getFullYear();
  };
  
  const hasEvents = (day) => {
    const dateKey = `${year}-${month + 1}-${day}`;
    return events[dateKey] && events[dateKey].length > 0;
  };
  
  const handleDayClick = (day) => {
    setSelectedDay(day);
    setShowPopup(true);
  };
  
  const closePopup = () => {
    setShowPopup(false);
    setSelectedDay(null);
  };
  
  const getEventsForDay = (day) => {
    const dateKey = `${year}-${month + 1}-${day}`;
    return events[dateKey] || [];
  };
  
  return (
    <div className={styles.container}>
      <div className={styles.calendarWrapper}>
        {/* Header */}
        <div className={styles.header}>
          <button 
            className={styles.navButton}
            onClick={goToPreviousMonth}
          >
            &#8249;
          </button>
          
          <h1 className={styles.monthTitle}>
            {monthNames[month]} {year}
          </h1>
          
          <button 
            className={styles.navButton}
            onClick={goToNextMonth}
          >
            &#8250;
          </button>
        </div>
        
        {/* Days of week header */}
        <div className={styles.daysHeader}>
          {daysOfWeek.map(day => (
            <div key={day} className={styles.dayHeader}>
              {day}
            </div>
          ))}
        </div>
        
        {/* Calendar grid */}
        <div className={styles.calendarGrid}>
          {calendarDays.map((day, index) => (
            <div key={index}>
              {day && (
                <button 
                  className={`${styles.dayButton} ${isToday(day) ? styles.today : ''} ${hasEvents(day) ? styles.hasEvents : ''}`}
                  onClick={() => handleDayClick(day)}
                >
                  {day}
                  {hasEvents(day) && <div className={styles.eventDot}></div>}
                </button>
              )}
            </div>
          ))}
        </div>
        
        {/* Event Popup */}
        {showPopup && (
          <div className={styles.popupOverlay} onClick={closePopup}>
            <div className={styles.popup} onClick={(e) => e.stopPropagation()}>
              <div className={styles.popupHeader}>
                <h3 className={styles.popupTitle}>
                  {monthNames[month]} {selectedDay}, {year}
                </h3>
                <button className={styles.closeButton} onClick={closePopup}>
                  ×
                </button>
              </div>
              <div className={styles.popupContent}>
                {getEventsForDay(selectedDay).length > 0 ? (
                  <div className={styles.eventsList}>
                    <h4 className={styles.eventsTitle}>Events for this day:</h4>
                    {getEventsForDay(selectedDay).map((event, index) => (
                      <div key={index} className={styles.eventItem}>
                        • {event}
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className={styles.noEvents}>
                    No events scheduled for this day.
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

.container {
  min-height: 100vh;
  background-color: #000000;
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: Arial, sans-serif;
}

.calendarWrapper {
  max-width: 600px;
  width: 100%;
}

.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 24px;
}

.navButton {
  padding: 12px;
  background-color: transparent;
  border: none;
  color: #ffffff;
  cursor: pointer;
  border-radius: 8px;
  transition: background-color 0.2s;
  font-size: 24px;
}

.navButton:hover {
  background-color: #374151;
}

.monthTitle {
  font-size: 32px;
  font-weight: 600;
  margin: 0;
}

.daysHeader {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 8px;
  margin-bottom: 8px;
}

.dayHeader {
  padding: 16px;
  text-align: center;
  color: #9CA3AF;
  font-size: 18px;
  font-weight: 500;
}

.calendarGrid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 8px;
}

.dayButton {
  width: 70px;
  height: 70px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  border: none;
  color: #E5E7EB;
  cursor: pointer;
  border-radius: 12px;
  font-size: 18px;
  transition: background-color 0.2s;
  position: relative;
}

.dayButton:hover {
  background-color: #374151;
}

.dayButton.today {
  background-color: #2563EB;
  color: #ffffff;
  font-weight: 600;
}

.dayButton.today:hover {
  background-color: #2563EB;
}

.dayButton.hasEvents {
  background-color: #1F2937;
}

.dayButton.hasEvents:hover {
  background-color: #374151;
}

.eventDot {
  position: absolute;
  bottom: 4px;
  right: 6px;
  width: 6px;
  height: 6px;
  background-color: #10B981;
  border-radius: 50%;
}

.dayButton.today .eventDot {
  background-color: #ffffff;
}

/* Popup Styles */
.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup {
  background-color: #1F2937;
  border-radius: 16px;
  padding: 0;
  max-width: 400px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.5);
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #374151;
}

.popupTitle {
  font-size: 20px;
  font-weight: 600;
  margin: 0;
  color: #ffffff;
}

.closeButton {
  background: none;
  border: none;
  color: #9CA3AF;
  font-size: 24px;
  cursor: pointer;
  padding: 4px;
  line-height: 1;
  transition: color 0.2s;
}

.closeButton:hover {
  color: #ffffff;
}

.popupContent {
  padding: 20px;
}

.eventsTitle {
  font-size: 16px;
  font-weight: 500;
  margin: 0 0 12px 0;
  color: #E5E7EB;
}

.eventsList {
  margin: 0;
}

.eventItem {
  padding: 8px 0;
  color: #D1D5DB;
  border-bottom: 1px solid #374151;
  font-size: 14px;
}

.eventItem:last-child {
  border-bottom: none;
}

.noEvents {
  color: #9CA3AF;
  font-style: italic;
  text-align: center;
  padding: 20px 0;
}
