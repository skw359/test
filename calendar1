// calendar.js
'use client';

import { useState, useEffect } from 'react';
import { getCurrentUser } from 'aws-amplify/auth';
import { generateClient } from 'aws-amplify/api';
import styles from '../styles/calendar.module.css';

const client = generateClient();

export default function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDay, setSelectedDay] = useState(null);
  const [showPopup, setShowPopup] = useState(false);
  const [currentUser, setCurrentUser] = useState('');
  
  // This is the final, processed list of meetings to display on the grid
  const [meetings, setMeetings] = useState({}); // Format: { 'YYYY-M-D': [meetingObj, ...] }
  const [loading, setLoading] = useState(true);

  // Raw data from our direct database subscriptions
  const [createdInvites, setCreatedInvites] = useState([]);
  const [invitedInvites, setInvitedInvites] = useState([]);
  
  // --- Standard Calendar Setup (Unchanged) ---
  const today = new Date();
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  const monthNames = ['January', /*...*/ 'December'];
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const calendarDays = Array(firstDay).fill(null).concat(Array.from({ length: daysInMonth }, (_, i) => i + 1));
  
  // --- NEW, EFFICIENT DATA LOADING ---

  // 1. Get current user
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user.username || user.signInDetails?.loginId || '');
      } catch (err) {
        console.log(err);
        setLoading(false);
      }
    };
    fetchCurrentUser();
  }, []);

  // 2. Subscription A: Get all meetings CREATED BY the current user.
  useEffect(() => {
    if (!currentUser) return;
    const sub = client.models.MeetingInvitation.observeQuery({
      filter: { createdBy: { eq: currentUser } },
    }).subscribe({
      next: ({ items }) => setCreatedInvites(items),
      error: (error) => console.error("Error on created meetings subscription:", error)
    });
    return () => sub.unsubscribe();
  }, [currentUser]);

  // 3. Subscription B: Get all meetings where the user was INVITED.
  useEffect(() => {
    if (!currentUser) return;
    const sub = client.models.MeetingInvitation.observeQuery({
      filter: { invited: { eq: currentUser } }
    }).subscribe({
      next: ({ items }) => {
        // We only care about invitations they have accepted.
        const accepted = items.filter(invite => invite.status === 'accepted');
        setInvitedInvites(accepted);
      },
      error: (error) => console.error("Error on invited meetings subscription:", error)
    });
    return () => sub.unsubscribe();
  }, [currentUser]);

  // 4. Processing Step: Combine the raw data into the format needed by the calendar.
  // This runs whenever the user's created or accepted invitations change.
  useEffect(() => {
    if (!currentUser) return;

    const allMeetings = {};
    const processedIds = new Set(); // Use a Set to prevent duplicate entries

    const addMeeting = (meeting) => {
      if (!meeting || processedIds.has(meeting.id)) return;

      const meetingDate = new Date(meeting.dateTime);
      const dateKey = `${meetingDate.getFullYear()}-${meetingDate.getMonth() + 1}-${meetingDate.getDate()}`;
      
      if (!allMeetings[dateKey]) {
        allMeetings[dateKey] = [];
      }
      
      allMeetings[dateKey].push(meeting);
      processedIds.add(meeting.id);
    };

    // The creator of a meeting is always an attendee.
    createdInvites.forEach(addMeeting);
    // Add meetings the user was invited to and accepted.
    invitedInvites.forEach(addMeeting);

    // Sort meetings within each day by time for a clean display
    for (const dateKey in allMeetings) {
      allMeetings[dateKey].sort((a, b) => new Date(a.dateTime) - new Date(b.dateTime));
    }
    
    setMeetings(allMeetings);
    setLoading(false);

  }, [createdInvites, invitedInvites, currentUser]);


  // --- Helper and Render Functions (Largely Unchanged) ---
  const goToTheLastMonth = () => setCurrentDate(new Date(year, month - 1, 1));
  const goToTheNextMonth = () => setCurrentDate(new Date(year, month + 1, 1));
  const isToday = (day) => day === today.getDate() && month === today.getMonth() && year === today.getFullYear();
  const hasMeetings = (day) => meetings[`${year}-${month + 1}-${day}`]?.length > 0;
  const getMeetingsForDay = (day) => meetings[`${year}-${month + 1}-${day}`] || [];
  const handleDayClick = (day) => { setSelectedDay(day); setShowPopup(true); };
  const closePopup = () => { setShowPopup(false); setSelectedDay(null); };
  const formatMeetingTime = (dateTime) => new Date(dateTime).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>Loading Calendar...</div>
      </div>
    );
  }
  
  // The entire JSX return statement is the same as your original, as it correctly uses the state and CSS.
  return (
    <div className={styles.container}>
      <div className={styles.calendarWrapper}>
        {/* ... Header and Calendar Grid JSX ... */}
        {showPopup && (
          <div className={styles.popupOverlay} onClick={closePopup}>
            <div className={styles.popup} onClick={(e) => e.stopPropagation()}>
              <div className={styles.popupHeader}>
                <h3 className={styles.popupTitle}>{monthNames[month]} {selectedDay}, {year}</h3>
                <button className={styles.closeButton} onClick={closePopup}>√ó</button>
              </div>
              <div className={styles.popupContent}>
                {getMeetingsForDay(selectedDay).length > 0 ? (
                  <div className={styles.meetingsList}>
                    <h4 className={styles.meetingsTitle}>Meetings:</h4>
                    {getMeetingsForDay(selectedDay).map((meeting, index) => (
                      <div key={index} className={styles.meetingItem}>
                        <div className={styles.meetingItemHeader}>
                          <span className={styles.meetingIcon}>üìÖ</span>
                          <span className={styles.meetingItemTitle}>{meeting.title}</span>
                          <span className={styles.meetingTime}>{formatMeetingTime(meeting.dateTime)}</span>
                        </div>
                        {meeting.location && <div className={styles.meetingLocation}>üìç {meeting.location}</div>}
                        {meeting.description && <div className={styles.meetingDescription}>{meeting.description}</div>}
                        <div className={styles.meetingMeta}>
                          <span className={styles.meetingCreator}>By: {meeting.createdBy}</span>
                          <span className={`${styles.meetingStatus} ${styles.statusAccepted}`}>
                            ‚úÖ {meeting.status === 'pending' ? 'Attending' : 'Accepted'}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className={styles.noMeetings}>
                    <p>No meetings scheduled for this day.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
