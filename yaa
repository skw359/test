import React, { useState, useEffect, useRef } from 'react';
import { getCurrentUser } from 'aws-amplify/auth';
import { generateClient } from 'aws-amplify/api';

const client = generateClient();

//when u msg someone
const createMessageMutation = `
  mutation CreateMessage($input: CreateMessageInput!) {
    createMessage(input: $input) {
      id
      owner
      receiver
      content
      timestamp
      createdAt
    }
  }
`;

//get msgs
const listMessages = `
  query ListMessages(
    $filter: ModelMessageFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        owner
        receiver
        content
        timestamp
        createdAt
      }
    }
  }
`;

//listen to database when new msgs come
const onCreateMessageSub = `
  subscription OnCreateMessage {
    onCreateMessage {
      id
      owner
      receiver
      content
      timestamp
      createdAt
    }
  }
`;

function Chat() {
  const [currentUser, setCurrentUser] = useState('');
  const [recipientUsername, setRecipientUsername] = useState('');
  const [recipientInput, setRecipientInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [messageInput, setMessageInput] = useState('');
  const [recentChats, setRecentChats] = useState([]);
  const [lastMessages, setLastMessages] = useState({}); // Store last message for each chat
  const messagesEndRef = useRef(null);

  //get current authenticated user
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user.username || user.signInDetails?.loginId);
      } catch (err) {
        console.log('No authenticated user:', err);
      }
    };

    fetchCurrentUser();
  }, []);

  // Fetch last message for each recent chat
  const fetchLastMessage = async (chatUser) => {
    if (!currentUser || !chatUser) return null;
    
    try {
      const sentMessages = await client.graphql({
        query: listMessages,
        variables: {
          filter: {
            and: [
              { owner: { eq: currentUser } },
              { receiver: { eq: chatUser } }
            ]
          },
          limit: 1,
        }
      });
      
      const receivedMessages = await client.graphql({
        query: listMessages,
        variables: {
          filter: {
            and: [
              { owner: { eq: chatUser } },
              { receiver: { eq: currentUser } }
            ]
          },
          limit: 1,
        }
      });

      const allMessages = [
        ...sentMessages.data.listMessages.items,
        ...receivedMessages.data.listMessages.items
      ];

      if (allMessages.length > 0) {
        const lastMsg = allMessages.sort((a, b) => 
          new Date(b.timestamp) - new Date(a.timestamp)
        )[0];
        return lastMsg;
      }
      return null;
    } catch (error) {
      console.error('Error fetching last message:', error);
      return null;
    }
  };

  // Update last messages when recent chats change
  useEffect(() => {
    const updateLastMessages = async () => {
      const lastMsgPromises = recentChats.map(async (chat) => {
        const lastMsg = await fetchLastMessage(chat);
        return [chat, lastMsg];
      });
      
      const results = await Promise.all(lastMsgPromises);
      const newLastMessages = {};
      results.forEach(([chat, msg]) => {
        if (msg) newLastMessages[chat] = msg;
      });
      
      setLastMessages(newLastMessages);
    };

    if (recentChats.length > 0 && currentUser) {
      updateLastMessages();
    }
  }, [recentChats, currentUser]);

  // now i wanna get msgs when recipient changes (so say if u switched chats)
  useEffect(() => {
    if (!currentUser || !recipientUsername) return;

    const fetchMessages = async () => {
      try {
        console.log('Fetching messages between:', currentUser, 'and', recipientUsername);
        
        // get messages where current user is sender and recipient is receiver
        const sentMessages = await client.graphql({
          query: listMessages,
          variables: {
            filter: {
              and: [
                { owner: { eq: currentUser } },
                { receiver: { eq: recipientUsername } }
              ]
            },
            limit: 100,
          }
        });
        
        //get messages recipient sent to current user
        const receivedMessages = await client.graphql({
          query: listMessages,
          variables: {
            filter: {
              and: [
                { owner: { eq: recipientUsername } },
                { receiver: { eq: currentUser } }
              ]
            },
            limit: 100,
          }
        });

        //combine and sort by timestamp (most recent on bottom)
        const allMessages = [...sentMessages.data.listMessages.items, ...receivedMessages.data.listMessages.items];

        console.log('messages:', allMessages.length);
        
        setMessages(
          allMessages.sort((a, b) =>
            new Date(a.timestamp) - new Date(b.timestamp)
          )
        );
      } catch (error) {
        console.error(error);
      }
    };

    fetchMessages();

    //ok now this is to setup the subscription and update if they're relevant
    const subscription = client.graphql({
      query: onCreateMessageSub,
    }).subscribe({
      next: ({ data }) => {
        const newMsg = data.onCreateMessage;
        console.log('Received new message via subscription:', newMsg);
        
        if (
          (newMsg.owner === currentUser && newMsg.receiver === recipientUsername) ||
          (newMsg.owner === recipientUsername && newMsg.receiver === currentUser)
        ) {
          console.log('Adding message to chat');
          setMessages(prev => [...prev, newMsg]);
        }
        
        // Update last messages for recent chats
        const chatPartner = newMsg.owner === currentUser ? newMsg.receiver : newMsg.owner;
        if (recentChats.includes(chatPartner)) {
          setLastMessages(prev => ({
            ...prev,
            [chatPartner]: newMsg
          }));
        }
      },
      error: (err) => console.error('Subscription error:', err)
    });

    return () => subscription.unsubscribe();
  }, [currentUser, recipientUsername]);

  // auto scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // add new recipient to recent chats
  useEffect(() => {
    if (recipientUsername && !recentChats.includes(recipientUsername)) {
      setRecentChats(prev => [recipientUsername, ...prev.slice(0, 9)]); // Keep last 10 chats
    }
  }, [recipientUsername, recentChats]);

  //this starts a new chat with a new user from the input field
  const startChat = () => {
    if (!recipientInput.trim()) return;
    setRecipientUsername(recipientInput.trim());
    setRecipientInput('');
  };

  const sendMessage = async () => {
    if (!messageInput.trim() || !currentUser || !recipientUsername) {
      console.log('Missing required fields:', { 
        messageInput: messageInput.trim(), 
        currentUser, 
        recipientUsername 
      });
      return;
    }
    
    const msgInput = {
      owner: currentUser,
      receiver: recipientUsername,
      content: messageInput.trim(),
      timestamp: new Date().toISOString(),
    };
    
    console.log('Sending message:', msgInput);
    
    try {
      const result = await client.graphql({
        query: createMessageMutation,
        variables: {
          input: msgInput
        }
      });
      console.log('Message sent successfully:', result);
      setMessageInput('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

    if (diffMins < 1) return 'now';
    if (diffMins < 60) return `${diffMins}m`;
    if (diffHours < 24) return `${diffHours}h`;
    if (diffDays < 7) return `${diffDays}d`;
    return date.toLocaleDateString();
  };

  const getInitials = (name) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  if (!currentUser) return <div>Loading user...</div>;

  return (
    <div style={{ 
      display: 'flex', 
      height: '100vh', 
      backgroundColor: '#1a1d29',
      color: '#fff',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
    }}>
      {/* Left Sidebar - Recent Chats */}
      <div style={{ 
        width: '350px', 
        backgroundColor: '#1a1d29',
        borderRight: '1px solid #2d3748',
        display: 'flex',
        flexDirection: 'column'
      }}>
        {/* Header */}
        <div style={{ 
          padding: '20px', 
          borderBottom: '1px solid #2d3748'
        }}>
          <h2 style={{ 
            margin: 0, 
            fontSize: '18px', 
            fontWeight: '600',
            marginBottom: '16px'
          }}>
            Chats
          </h2>
          
          {/* New Chat Input */}
          <div style={{ display: 'flex', gap: '8px' }}>
            <input
              type="text"
              value={recipientInput}
              onChange={e => setRecipientInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && startChat()}
              placeholder="Start new chat..."
              style={{ 
                flex: 1,
                padding: '8px 12px',
                backgroundColor: '#2d3748',
                border: '1px solid #4a5568',
                borderRadius: '6px',
                color: '#fff',
                fontSize: '14px'
              }}
            />
            <button
              onClick={startChat}
              style={{ 
                padding: '8px 12px',
                backgroundColor: '#667eea',
                border: 'none',
                borderRadius: '6px',
                color: '#fff',
                fontSize: '14px',
                cursor: 'pointer'
              }}
            >
              +
            </button>
          </div>
        </div>

        {/* Chat List */}
        <div style={{ 
          flex: 1, 
          overflowY: 'auto'
        }}>
          {recentChats.length === 0 ? (
            <div style={{ 
              padding: '40px 20px', 
              textAlign: 'center', 
              color: '#718096' 
            }}>
              No recent chats
            </div>
          ) : (
            recentChats.map(chat => {
              const lastMsg = lastMessages[chat];
              const isActive = chat === recipientUsername;
              
              return (
                <div
                  key={chat}
                  onClick={() => setRecipientUsername(chat)}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    padding: '12px 20px',
                    cursor: 'pointer',
                    backgroundColor: isActive ? '#2d3748' : 'transparent',
                    borderLeft: isActive ? '3px solid #667eea' : '3px solid transparent',
                    ':hover': {
                      backgroundColor: '#2d3748'
                    }
                  }}
                  onMouseEnter={e => {
                    if (!isActive) e.target.style.backgroundColor = '#2a2d3a';
                  }}
                  onMouseLeave={e => {
                    if (!isActive) e.target.style.backgroundColor = 'transparent';
                  }}
                >
                  {/* Avatar */}
                  <div style={{
                    width: '40px',
                    height: '40px',
                    borderRadius: '50%',
                    backgroundColor: '#667eea',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    marginRight: '12px',
                    fontSize: '14px',
                    fontWeight: '600'
                  }}>
                    {getInitials(chat)}
                  </div>
                  
                  {/* Chat Info */}
                  <div style={{ flex: 1, minWidth: 0 }}>
                    <div style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      alignItems: 'center',
                      marginBottom: '4px'
                    }}>
                      <span style={{
                        fontSize: '15px',
                        fontWeight: '500',
                        color: '#fff'
                      }}>
                        {chat}
                      </span>
                      {lastMsg && (
                        <span style={{
                          fontSize: '12px',
                          color: '#718096'
                        }}>
                          {formatTime(lastMsg.timestamp)}
                        </span>
                      )}
                    </div>
                    {lastMsg && (
                      <div style={{
                        fontSize: '13px',
                        color: '#718096',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}>
                        {lastMsg.owner === currentUser ? 'You: ' : ''}
                        {lastMsg.content}
                      </div>
                    )}
                  </div>
                </div>
              );
            })
          )}
        </div>
      </div>

      {/* Right Side - Chat Interface */}
      <div style={{ 
        flex: 1, 
        display: 'flex', 
        flexDirection: 'column',
        backgroundColor: '#0f1419'
      }}>
        {!recipientUsername ? (
          /* Welcome Screen */
          <div style={{
            flex: 1,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column',
            color: '#718096'
          }}>
            <div style={{
              fontSize: '48px',
              marginBottom: '16px'
            }}>💬</div>
            <h3 style={{ 
              margin: 0, 
              fontSize: '24px', 
              fontWeight: '600',
              marginBottom: '8px',
              color: '#fff'
            }}>
              Welcome to Messaging
            </h3>
            <p style={{ 
              margin: 0, 
              fontSize: '16px',
              textAlign: 'center'
            }}>
              Select a chat from the sidebar or start a new conversation
            </p>
          </div>
        ) : (
          /* Active Chat */
          <>
            {/* Chat Header */}
            <div style={{ 
              padding: '16px 24px', 
              backgroundColor: '#1a1d29',
              borderBottom: '1px solid #2d3748',
              display: 'flex', 
              alignItems: 'center',
              gap: '12px'
            }}>
              <div style={{
                width: '36px',
                height: '36px',
                borderRadius: '50%',
                backgroundColor: '#667eea',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '14px',
                fontWeight: '600'
              }}>
                {getInitials(recipientUsername)}
              </div>
              <div>
                <h3 style={{ 
                  margin: 0, 
                  fontSize: '16px', 
                  fontWeight: '600',
                  color: '#fff'
                }}>
                  {recipientUsername}
                </h3>
                <div style={{
                  fontSize: '12px',
                  color: '#718096'
                }}>
                  Online
                </div>
              </div>
            </div>

            {/* Messages */}
            <div style={{ 
              flex: 1, 
              padding: '16px 24px', 
              overflowY: 'auto',
              display: 'flex',
              flexDirection: 'column'
            }}>
              {messages.length === 0 ? (
                <div style={{ 
                  textAlign: 'center', 
                  color: '#718096', 
                  marginTop: '50px',
                  fontSize: '14px'
                }}>
                  No messages yet. Start the conversation!
                </div>
              ) : (
                messages.map((msg) => (
                  <div 
                    key={msg.id} 
                    style={{
                      display: 'flex',
                      justifyContent: msg.owner === currentUser ? 'flex-end' : 'flex-start',
                      marginBottom: '12px'
                    }}
                  >
                    <div style={{
                      maxWidth: '70%',
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: msg.owner === currentUser ? 'flex-end' : 'flex-start'
                    }}>
                      <div
                        style={{
                          padding: '12px 16px',
                          backgroundColor: msg.owner === currentUser ? '#667eea' : '#2d3748',
                          borderRadius: '18px',
                          borderBottomRightRadius: msg.owner === currentUser ? '4px' : '18px',
                          borderBottomLeftRadius: msg.owner === currentUser ? '18px' : '4px',
                          color: '#fff',
                          fontSize: '14px',
                          lineHeight: '1.4',
                          wordWrap: 'break-word'
                        }}
                      >
                        {msg.content}
                      </div>
                      <div style={{ 
                        fontSize: '11px', 
                        color: '#718096', 
                        marginTop: '4px',
                        marginLeft: msg.owner === currentUser ? '0' : '12px',
                        marginRight: msg.owner === currentUser ? '12px' : '0'
                      }}>
                        {new Date(msg.timestamp).toLocaleTimeString([], {
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </div>
                    </div>
                  </div>
                ))
              )}
              <div ref={messagesEndRef}></div>
            </div>

            {/* Message Input */}
            <div style={{ 
              padding: '16px 24px',
              backgroundColor: '#1a1d29',
              borderTop: '1px solid #2d3748'
            }}>
              <div style={{ 
                display: 'flex', 
                gap: '12px',
                alignItems: 'flex-end'
              }}>
                <input
                  value={messageInput}
                  onChange={e => setMessageInput(e.target.value)}
                  onKeyDown={e => e.key === 'Enter' && !e.shiftKey && sendMessage()}
                  placeholder="Type a message..."
                  style={{ 
                    flex: 1,
                    padding: '12px 16px',
                    backgroundColor: '#2d3748',
                    border: '1px solid #4a5568',
                    borderRadius: '20px',
                    color: '#fff',
                    fontSize: '14px',
                    resize: 'none',
                    outline: 'none'
                  }}
                />
                <button
                  onClick={sendMessage}
                  style={{ 
                    padding: '12px 20px',
                    backgroundColor: '#667eea',
                    border: 'none',
                    borderRadius: '20px',
                    color: '#fff',
                    fontSize: '14px',
                    fontWeight: '500',
                    cursor: 'pointer',
                    ':hover': {
                      backgroundColor: '#5a67d8'
                    }
                  }}
                  onMouseEnter={e => e.target.style.backgroundColor = '#5a67d8'}
                  onMouseLeave={e => e.target.style.backgroundColor = '#667eea'}
                >
                  Send
                </button>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}

export default Chat;
