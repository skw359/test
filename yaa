import styles from '../styles/chat.module.css'
import React, { useEffect, useState, useRef } from 'react';
import { Amplify } from 'aws-amplify';
import { getCurrentUser } from 'aws-amplify/auth';
import { generateClient } from 'aws-amplify/api';

// Create the API client
const client = generateClient();

const createMessageMutation = /* GraphQL */ `
  mutation CreateMessage($input: CreateMessageInput!) {
    createMessage(input: $input) {
      id
      owner
      receiver
      content
      timestamp
      createdAt
    }
  }
`;

const listMessagesQuery = /* GraphQL */ `
  query ListMessages(
    $filter: ModelMessageFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        owner
        receiver
        content
        timestamp
        createdAt
      }
    }
  }
`;

const onCreateMessageSub = /* GraphQL */ `
  subscription OnCreateMessage {
    onCreateMessage {
      id
      owner
      receiver
      content
      timestamp
      createdAt
    }
  }
`;

function Chat({ recipientUsername }) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [currentUser, setCurrentUser] = useState('');
  const messagesEndRef = useRef(null);

  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user.username || user.signInDetails?.loginId);
      } catch (err) {
        console.log('No authenticated user:', err);
      }
    };

    fetchCurrentUser();
  }, []);

  useEffect(() => {
    if (!currentUser) return;

    const fetchMessages = async () => {
      try {
        // Start with a simple query to test
        const result = await client.graphql({
          query: listMessagesQuery,
          variables: {
            limit: 100,
          }
        });
        
        // Filter messages in JavaScript instead of DynamoDB
        const filteredMessages = result.data.listMessages.items.filter(msg => 
          (msg.owner === currentUser && msg.receiver === recipientUsername) ||
          (msg.owner === recipientUsername && msg.receiver === currentUser)
        );
        
        setMessages(
          filteredMessages.sort((a, b) =>
            new Date(a.timestamp) - new Date(b.timestamp)
          )
        );
      } catch (error) {
        console.error('Error fetching messages:', error);
        console.error('Full error details:', error);
      }
    };

    fetchMessages();

    // Set up subscription
    const subscription = client.graphql({
      query: onCreateMessageSub,
    }).subscribe({
      next: ({ data }) => {
        const newMsg = data.onCreateMessage;
        if (
          (newMsg.owner === currentUser && newMsg.receiver === recipientUsername) ||
          (newMsg.owner === recipientUsername && newMsg.receiver === currentUser)
        ) {
          setMessages(prev => [...prev, newMsg]);
        }
      },
      error: (err) => console.error('Subscription error:', err)
    });

    return () => subscription.unsubscribe();
  }, [currentUser, recipientUsername]);

  const sendMessage = async () => {
    if (!input.trim() || !currentUser) return;
    
    try {
      await client.graphql({
        query: createMessageMutation,
        variables: {
          input: {
            owner: currentUser,
            receiver: recipientUsername,
            content: input,
            timestamp: new Date().toISOString(),
          }
        }
      });
      setInput('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  if (!currentUser) return <div>Loading user...</div>;

  return (
    <div style={{ maxWidth: 420, margin: '40px auto', border: '1px solid #23263a', borderRadius: 10, background: '#191b22', padding: 20, color: '#fff', height: 500, display: 'flex', flexDirection: 'column' }}>
      <h3 style={{ textAlign: 'center' }}>Chat with {recipientUsername}</h3>
      <div style={{ flex: 1, overflowY: 'auto', background: '#25273c', borderRadius: 8, padding: 10, marginBottom: 12 }}>
        {messages.map((msg) => (
          <div key={msg.id} style={{
            textAlign: msg.owner === currentUser ? 'right' : 'left',
            margin: '6px 0'
          }}>
            <span
              style={{
                display: 'inline-block',
                background: msg.owner === currentUser ? '#3466ea' : '#2b2f45',
                color: '#fff',
                borderRadius: 14,
                padding: '7px 13px',
                maxWidth: 260,
                wordBreak: 'break-word'
              }}
            >
              {msg.content}
            </span>
            <div style={{ fontSize: 11, color: '#aaa', marginTop: 2 }}>
              {msg.owner === currentUser ? 'You' : msg.owner}
              &nbsp;Â·&nbsp;
              {new Date(msg.timestamp).toLocaleTimeString()}
            </div>
          </div>
        ))}
        <div ref={messagesEndRef}></div>
      </div>
      <div style={{ display: 'flex', gap: 6 }}>
        <input
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyDown={e => e.key === 'Enter' && sendMessage()}
          placeholder="Type a message..."
          style={{ flex: 1, borderRadius: 8, border: 'none', padding: 10, outline: 'none', background: '#23263a', color: '#fff' }}
        />
        <button
          onClick={sendMessage}
          style={{ padding: '0 18px', borderRadius: 8, background: '#3466ea', color: '#fff', border: 'none', fontWeight: 600, cursor: 'pointer' }}
        >
          Send
        </button>
      </div>
    </div>
  );
}

export default Chat;
