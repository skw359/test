import { useState, useEffect } from "react";
import styles from '../styles/_app.module.css';
import outputs from "../../amplify_outputs.json";
import { Authenticator } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';
import { Amplify } from "aws-amplify";
import Layout from '../../components/shared/layout';
import ProfileButton from '../../components/shared/ProfileButton';

Amplify.configure(outputs);

export default function App({ Component, pageProps }) {
  return (
    <Layout>
      <Authenticator>
        {({ signOut, user }) => (
          <>
            {/* Top Navigation Bar */}
            <nav className={styles.navbar}>
              {/* Logo/Brand */}
              <div className={styles.brand}>
                Velocity
              </div>

              {/* Profile Dropdown */}
              <ProfileButton signOut={signOut} />
            </nav>

            {/* Main Content with top padding to account for fixed nav */}
            <div className={styles.mainContent}>
              <Component {...pageProps} />
            </div>
          </>
        )}
      </Authenticator>
    </Layout>
  );
}

_app.module.css:
/* Navigation Bar Styles */
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 60px;
  background-color: rgba(26, 29, 41, 0.95);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid #2d3748;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 24px;
  z-index: 50;
}

/* Brand/Logo Styles */
.brand {
  color: #fff;
  font-size: 18px;
  font-weight: 600;
}

/* Main Content Container */
.mainContent {
  padding-top: 60px;
}

ProfileButton.js:
import { useState, useEffect, useRef } from "react";
import { getCurrentUser } from 'aws-amplify/auth';
import styles from './ProfileButton.module.css';

function ProfileButton({ signOut }) {
  const [isOpen, setIsOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState('');
  const dropdownRef = useRef(null);

  // Get current authenticated user
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user.username || user.signInDetails?.loginId || '');
      } catch (err) {
        console.log(err);
      }
    };

    fetchCurrentUser();
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const getInitials = (name) => {
    if (!name) return '?';
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const handleViewProfile = () => {
    setIsOpen(false);
    // Add profile page navigation here if you have one
    // router.push('/profile');
  };

  const handleSettings = () => {
    setIsOpen(false);
    // Add settings page navigation here if you have one
    // router.push('/settings');
  };

  const handleSignOut = () => {
    setIsOpen(false);
    signOut();
  };

  return (
    <div className={styles.container} ref={dropdownRef}>
      {/* Profile Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={styles.profileButton}
      >
        {getInitials(currentUser)}
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className={styles.dropdown}>
          {/* User Info Section */}
          <div className={styles.userInfo}>
            <div className={styles.userInfoContent}>
              <div className={styles.userAvatar}>
                {getInitials(currentUser)}
              </div>
              <div>
                <div className={styles.userName}>
                  {currentUser || 'Loading...'}
                </div>
                <div className={styles.userStatus}>
                  Online
                </div>
              </div>
            </div>
          </div>

          {/* Menu Options */}
          <div className={styles.menuOptions}>
            <button
              onClick={handleViewProfile}
              className={styles.menuItem}
            >
              üë§ View Profile
            </button>

            <button
              onClick={handleSettings}
              className={styles.menuItem}
            >
              ‚öôÔ∏è Settings
            </button>

            <div className={styles.divider} />

            <button
              onClick={handleSignOut}
              className={`${styles.menuItem} ${styles.signOutItem}`}
            >
              üö™ Sign Out
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default ProfileButton;

ProfileButton.module.css:
/* Profile Button Container */
.container {
  position: relative;
}

/* Profile Button */
.profileButton {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: #667eea;
  border: none;
  color: white;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.profileButton:hover {
  background-color: #5a67d8;
  transform: scale(1.05);
}

/* Dropdown Menu */
.dropdown {
  position: absolute;
  top: 50px;
  right: 0;
  background-color: #1a1d29;
  border: 1px solid #2d3748;
  border-radius: 8px;
  min-width: 200px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  z-index: 1000;
  overflow: hidden;
}

/* User Info Section */
.userInfo {
  padding: 16px;
  border-bottom: 1px solid #2d3748;
  background-color: #252936;
}

.userInfoContent {
  display: flex;
  align-items: center;
  gap: 12px;
}

.userAvatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #667eea;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-weight: 600;
  color: white;
}

.userName {
  color: #fff;
  font-size: 14px;
  font-weight: 600;
  margin-bottom: 2px;
}

.userStatus {
  color: #718096;
  font-size: 12px;
}

/* Menu Options */
.menuOptions {
  padding: 8px 0;
}

.menuItem {
  width: 100%;
  padding: 12px 16px;
  background-color: transparent;
  border: none;
  color: #fff;
  font-size: 14px;
  text-align: left;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: background-color 0.2s ease;
}

.menuItem:hover {
  background-color: #2d3748;
}

.signOutItem {
  color: #f56565;
}

.signOutItem:hover {
  background-color: #2d3748;
}

/* Divider */
.divider {
  height: 1px;
  background-color: #2d3748;
  margin: 8px 0;
}
