import React, { useEffect, useState, useRef } from 'react';
import { Amplify, graphqlOperation } from 'aws-amplify';
// ... GraphQL strings as above

function Chat({ recipientUsername }) {
  // ...state setup as before

  useEffect(() => {
    Amplify.Auth.currentAuthenticatedUser().then(user => {
      setCurrentUser(user.username || user.attributes?.email);
    });
  }, []);

  useEffect(() => {
    if (!currentUser) return;

    const fetchMessages = async () => {
      const result = await Amplify.API.graphql(
        graphqlOperation(listMessagesQuery, {
          filter: {
            or: [
              { and: [{ owner: { eq: currentUser } }, { receiver: { eq: recipientUsername } }] },
              { and: [{ owner: { eq: recipientUsername } }, { receiver: { eq: currentUser } }] }
            ]
          },
          limit: 100,
        })
      );
      setMessages(
        result.data.listMessages.items.sort((a, b) =>
          new Date(a.timestamp) - new Date(b.timestamp)
        )
      );
    };

    fetchMessages();

    const subscription = Amplify.API.graphql(
      graphqlOperation(onCreateMessageSub)
    ).subscribe({
      next: ({ value }) => {
        const newMsg = value.data.onCreateMessage;
        if (
          (newMsg.owner === currentUser && newMsg.receiver === recipientUsername) ||
          (newMsg.owner === recipientUsername && newMsg.receiver === currentUser)
        ) {
          setMessages(prev => [...prev, newMsg]);
        }
      }
    });

    return () => subscription.unsubscribe();
  }, [currentUser, recipientUsername]);

  // ...rest of the component unchanged
}
