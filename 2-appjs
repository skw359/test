import "../styles/globals.css";
import outputs from "../../amplify_outputs.json";
import { Authenticator } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';
import { Amplify } from "aws-amplify";
import Layout from '../../components/shared/layout';
import ProfileButton from '../../components/shared/ProfileButton';
import styles from '../styles/_app.module.css';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';

Amplify.configure(outputs);

export default function App({ Component, pageProps }) {
  const router = useRouter();
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [displayedRoute, setDisplayedRoute] = useState(router.asPath);

  useEffect(() => {
    const handleRouteChangeStart = (url) => {
      if (url !== router.asPath) {
        setIsTransitioning(true);
      }
    };

    const handleRouteChangeComplete = (url) => {
      setDisplayedRoute(url);
      setIsTransitioning(false);
    };

    const handleRouteChangeError = () => {
      setIsTransitioning(false);
    };

    router.events.on('routeChangeStart', handleRouteChangeStart);
    router.events.on('routeChangeComplete', handleRouteChangeComplete);
    router.events.on('routeChangeError', handleRouteChangeError);

    return () => {
      router.events.off('routeChangeStart', handleRouteChangeStart);
      router.events.off('routeChangeComplete', handleRouteChangeComplete);
      router.events.off('routeChangeError', handleRouteChangeError);
    };
  }, [router]);

  // Also trigger transition when route changes without events firing
  useEffect(() => {
    if (router.asPath !== displayedRoute && !isTransitioning) {
      setIsTransitioning(true);
      const timer = setTimeout(() => {
        setDisplayedRoute(router.asPath);
        setIsTransitioning(false);
      }, 250);
      return () => clearTimeout(timer);
    }
  }, [router.asPath, displayedRoute, isTransitioning]);

  return (
    <Layout>
      <Authenticator>
        {({ signOut }) => (
          <>
            <nav className={styles.navbar}>
              <div className={styles.navTitle}>Velocity</div>
              <ProfileButton signOut={signOut} />
            </nav>
            <div className={styles.pageContent}>
              <div 
                key={displayedRoute}
                className={`${styles.pageTransition} ${isTransitioning ? styles.fadeOut : styles.fadeIn}`}
              >
                <Component {...pageProps} /> 
              </div>
            </div>
          </>
        )}
      </Authenticator>
    </Layout>
  );
}
