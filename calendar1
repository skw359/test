'use client';

import { useState, useEffect } from 'react';
import { getCurrentUser } from 'aws-amplify/auth';
import { generateClient } from 'aws-amplify/api';
import styles from '../styles/calendar.module.css';

const client = generateClient();

export default function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDay, setSelectedDay] = useState(null);
  const [showPopup, setShowPopup] = useState(false);
  const [currentUser, setCurrentUser] = useState('');
  const [meetings, setMeetings] = useState({});
  const [loading, setLoading] = useState(true);
  
  const today = new Date();
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];
  
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  
  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  
  const calendarDays = [];
  
  // Get current user
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user.username || user.signInDetails?.loginId || '');
      } catch (err) {
        console.log('Error fetching user:', err);
      }
    };
    fetchCurrentUser();
  }, []);

  // Load meetings from all chats the user is part of
  useEffect(() => {
    if (!currentUser) return;

    const loadMeetings = async () => {
      try {
        setLoading(true);
        
        // Get all chats the user is part of
        const userChats = await client.models.ChatUser.list({
          filter: { username: { eq: currentUser } }
        });

        const allMeetings = {};

        // For each chat, get all messages and extract meetings
        for (const chatUser of userChats.data) {
          const messages = await client.models.ChatMessages.list({
            filter: { chatId: { eq: chatUser.chatId } }
          });

          // Process messages to find accepted meetings
          messages.data.forEach(msg => {
            try {
              const content = JSON.parse(msg.content);
              
              if (content.type === 'meeting_invite' && content.meeting.status === 'accepted') {
                const meeting = content.meeting;
                const meetingDate = new Date(meeting.dateTime);
                const dateKey = `${meetingDate.getFullYear()}-${meetingDate.getMonth() + 1}-${meetingDate.getDate()}`;
                
                if (!allMeetings[dateKey]) {
                  allMeetings[dateKey] = [];
                }
                
                allMeetings[dateKey].push({
                  ...meeting,
                  chatId: chatUser.chatId,
                  messageId: msg.id
                });
              }
            } catch (e) {
              // Skip non-JSON messages or invalid format
            }
          });
        }

        setMeetings(allMeetings);
        setLoading(false);
      } catch (error) {
        console.error('Error loading meetings:', error);
        setLoading(false);
      }
    };

    loadMeetings();
  }, [currentUser]);

  // Real-time subscription for new meetings
  useEffect(() => {
    if (!currentUser) return;

    const subscription = client.models.ChatMessages.observeQuery().subscribe({
      next: ({ items }) => {
        // Process new messages for meeting updates
        const updatedMeetings = { ...meetings };
        
        items.forEach(msg => {
          try {
            const content = JSON.parse(msg.content);
            
            if (content.type === 'meeting_invite' && content.meeting.status === 'accepted') {
              const meeting = content.meeting;
              const meetingDate = new Date(meeting.dateTime);
              const dateKey = `${meetingDate.getFullYear()}-${meetingDate.getMonth() + 1}-${meetingDate.getDate()}`;
              
              if (!updatedMeetings[dateKey]) {
                updatedMeetings[dateKey] = [];
              }
              
              // Check if meeting already exists to avoid duplicates
              const existingMeeting = updatedMeetings[dateKey].find(m => m.invitationId === meeting.invitationId);
              if (!existingMeeting) {
                updatedMeetings[dateKey].push({
                  ...meeting,
                  messageId: msg.id
                });
              }
            }
            
            // Handle meeting responses (status updates)
            if (content.type === 'meeting_response') {
              const response = content.meeting;
              
              // Find and update the original meeting status
              Object.keys(updatedMeetings).forEach(dateKey => {
                updatedMeetings[dateKey] = updatedMeetings[dateKey].map(meeting => {
                  if (meeting.invitationId === response.invitationId) {
                    return { ...meeting, status: response.status };
                  }
                  return meeting;
                }).filter(meeting => meeting.status === 'accepted'); // Only show accepted meetings
              });
            }
          } catch (e) {
            // Skip non-JSON messages
          }
        });
        
        setMeetings(updatedMeetings);
      },
      error: (error) => {
        console.error('Real-time subscription error:', error);
      }
    });

    return () => subscription.unsubscribe();
  }, [currentUser, meetings]);

  // Build calendar days
  for (let i = 0; i < firstDay; i++) {
    calendarDays.push(null);
  }
  
  for (let day = 1; day <= daysInMonth; day++) {
    calendarDays.push(day);
  }
  
  const goToTheLastMonth = () => {
    setCurrentDate(new Date(year, month - 1, 1));
  };
  
  const goToTheNextMonth = () => {
    setCurrentDate(new Date(year, month + 1, 1));
  };
  
  const isToday = (day) => {
    return day === today.getDate() && 
           month === today.getMonth() && 
           year === today.getFullYear();
  };
  
  const hasMeetings = (day) => {
    const dateKey = `${year}-${month + 1}-${day}`;
    return meetings[dateKey] && meetings[dateKey].length > 0;
  };
  
  const handleDayClick = (day) => {
    setSelectedDay(day);
    setShowPopup(true);
  };
  
  const closePopup = () => {
    setShowPopup(false);
    setSelectedDay(null);
  };
  
  const getMeetingsForDay = (day) => {
    const dateKey = `${year}-${month + 1}-${day}`;
    return meetings[dateKey] || [];
  };

  const formatMeetingTime = (dateTimeString) => {
    const date = new Date(dateTimeString);
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };

  const formatMeetingDateTime = (dateTimeString) => {
    const date = new Date(dateTimeString);
    return date.toLocaleString('en-US', {
      weekday: 'long',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>Loading calendar...</div>
      </div>
    );
  }
  
  return (
    <div className={styles.container}>
      <div className={styles.calendarWrapper}>
        {/* Header */}
        <div className={styles.header}>
          <button 
            className={styles.navButton}
            onClick={goToTheLastMonth}
          >
            &#8249;
          </button>
          
          <h1 className={styles.monthTitle}>
            {monthNames[month]} {year}
          </h1>
          
          <button 
            className={styles.navButton}
            onClick={goToTheNextMonth}
          >
            &#8250;
          </button>
        </div>
        
        {/* Days of week header */}
        <div className={styles.daysHeader}>
          {daysOfWeek.map(day => (
            <div key={day} className={styles.dayHeader}>
              {day}
            </div>
          ))}
        </div>
        
        {/* Calendar grid */}
        <div className={styles.calendarGrid}>
          {calendarDays.map((day, index) => (
            <div key={index}>
              {day && (
                <button 
                  className={`${styles.dayButton} ${isToday(day) ? styles.today : ''} ${hasMeetings(day) ? styles.hasMeetings : ''}`}
                  onClick={() => handleDayClick(day)}
                >
                  {day}
                  {hasMeetings(day) && (
                    <div className={styles.eventIndicator}>
                      <div className={styles.eventDot}></div>
                      <span className={styles.eventCount}>
                        {getMeetingsForDay(day).length}
                      </span>
                    </div>
                  )}
                </button>
              )}
            </div>
          ))}
        </div>
        
        {/* Meeting popup */}
        {showPopup && (
          <div className={styles.popupOverlay} onClick={closePopup}>
            <div className={styles.popup} onClick={(e) => e.stopPropagation()}>
              <div className={styles.popupHeader}>
                <h3 className={styles.popupTitle}>
                  {monthNames[month]} {selectedDay}, {year}
                </h3>
                <button className={styles.closeButton} onClick={closePopup}>
                  ×
                </button>
              </div>
              <div className={styles.popupContent}>
                {getMeetingsForDay(selectedDay).length > 0 ? (
                  <div className={styles.meetingsList}>
                    <h4 className={styles.meetingsTitle}>
                      Meetings for this day ({getMeetingsForDay(selectedDay).length}):
                    </h4>
                    {getMeetingsForDay(selectedDay).map((meeting, index) => (
                      <div key={index} className={styles.meetingItem}>
                        <div className={styles.meetingItemHeader}>
                          <span className={styles.meetingIcon}>📅</span>
                          <span className={styles.meetingItemTitle}>{meeting.title}</span>
                          <span className={styles.meetingTime}>
                            {formatMeetingTime(meeting.dateTime)}
                          </span>
                        </div>
                        {meeting.location && (
                          <div className={styles.meetingLocation}>
                            📍 {meeting.location}
                          </div>
                        )}
                        {meeting.description && (
                          <div className={styles.meetingDescription}>
                            {meeting.description}
                          </div>
                        )}
                        <div className={styles.meetingMeta}>
                          <span className={styles.meetingCreator}>
                            Created by: {meeting.createdBy}
                          </span>
                          <span className={`${styles.meetingStatus} ${styles.statusAccepted}`}>
                            ✅ Accepted
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className={styles.noMeetings}>
                    <div className={styles.noMeetingsIcon}>📅</div>
                    <p>No meetings scheduled for this day.</p>
                    <p className={styles.noMeetingsHint}>
                      Accept meeting invites in your chats to see them here!
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

.container {
  min-height: 100vh;
  background-color: 'transparent';
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: Arial, sans-serif;
}

.calendarWrapper {
  max-width: 600px;
  width: 100%;
}

.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 24px;
}

.navButton {
  padding: 12px;
  background-color: transparent;
  border: none;
  color: #ffffff;
  cursor: pointer;
  border-radius: 8px;
  transition: background-color 0.2s;
  font-size: 24px;
}

.navButton:hover {
  background-color: #374151;
}

.monthTitle {
  font-size: 32px;
  font-weight: 600;
  margin: 0;
}

.daysHeader {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 8px;
  margin-bottom: 8px;
}

.dayHeader {
  padding: 16px;
  text-align: center;
  color: #9CA3AF;
  font-size: 18px;
  font-weight: 500;
}

.calendarGrid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 8px;
}

.dayButton {
  width: 70px;
  height: 70px;
  background-color: transparent;
  border: none;
  color: #E5E7EB;
  cursor: pointer;
  border-radius: 12px;
  font-size: 18px;
  position: relative;
}

.dayButton:hover {
  background-color: #374151;
}

.dayButton.today {
  background-color: #ff5e00;
  color: #ffffff;
  font-weight: 600;
}

.dayButton.today:hover {
  background-color: #ff5e00;
}

.dayButton.hasEvents {
  background-color: #1F2937;
}

.dayButton.hasEvents:hover {
  background-color: #374151;
}

.eventDot {
  position: absolute;
  bottom: 55px;
  right: 55px;
  width: 6px;
  height: 6px;
  background-color: #10B981;
  border-radius: 50%;
}

.dayButton.today .eventDot {
  background-color: #ffffff;
}

/* Popup Styles */
.popupOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup {
  background-color: #1F2937;
  border-radius: 16px;
  padding: 0;
  max-width: 400px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.5);
}

.popupHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #374151;
}

.popupTitle {
  font-size: 20px;
  font-weight: 600;
  margin: 0;
  color: #ffffff;
}

.closeButton {
  background: none;
  border: none;
  color: #9CA3AF;
  font-size: 24px;
  cursor: pointer;
  padding: 4px;
  line-height: 1;
  transition: color 0.2s;
}

.closeButton:hover {
  color: #ffffff;
}

.popupContent {
  padding: 20px;
}

.eventsTitle {
  font-size: 16px;
  font-weight: 500;
  margin: 0 0 12px 0;
  color: #E5E7EB;
}

.eventsList {
  margin: 0;
}

.eventItem {
  padding: 8px 0;
  color: #D1D5DB;
  border-bottom: 1px solid #374151;
  font-size: 14px;
}

.eventItem:last-child {
  border-bottom: none;
}

.noEvents {
  color: #9CA3AF;
  text-align: center;
  padding: 20px 0;
}
